# Project Analysis — vCard Personal Portfolio

**Project folder:** `portfolio_web`

**Purpose:**
This analysis file documents the changes made to the cloned vCard Personal Portfolio so it can be used inside your own `portfolio_web` project. It explains the file mapping, what was updated, how to copy assets, how to verify locally, and a recommended Git branching/commit workflow for your class project.

---

## 1. Current project structure (target)

```
portfolio_web/
├─ index.html
├─ style.css
├─ script.js
├─ images/      ← all images copied here
├─ analysis/    ← optional folder you already have
└─ (other files)
```

## 2. Summary of changes made

* Fixed asset paths in `index.html` and `script.js` so they point to the new local structure.

  * `./assets/css/style.css` → `./style.css`
  * `./assets/js/script.js` → `./script.js`
  * `./assets/images/<file>` → `./images/<file>` (applied to every image reference)
* `style.css` required **no path changes**; it references no `assets/...` paths.
* No other code, text, or logic was changed — only path strings were updated.

## 3. Files modified (exact)

* `index.html` — updated all asset paths to match `portfolio_web/`.
* `script.js` — no logic changes; ensured the HTML references `./script.js`.
* `style.css` — unchanged.

> Keep backups: before overwriting, keep `.bak` copies or create a branch.

## 4. How to copy images from the cloned repo into your project

1. Locate the cloned repo folder on your PC (the one with `assets/images/`).
2. Copy the entire `assets/images/` directory into `portfolio_web/` and rename it to `images`.

   * Example: `cp -r path/to/cloned_repo/assets/images path/to/portfolio_web/images`
3. Verify filenames: ensure names in `images/` match those referenced in `index.html` (e.g. `avatar-1.png`, `project-1.jpg`, `icon-design.svg`, `logo.ico`, etc.).

## 5. Local test checklist

1. Open `portfolio_web/index.html` in a browser.
2. Verify page loads and styles apply (CSS loaded).
3. Check the browser console and network tab for 404 errors — missing `images/<name>` will show here.
4. Click the testimonials items, filter/select controls, and navigation buttons to confirm JavaScript works.
5. If anything is missing, either rename the image in `images/` to match the reference or update the filename in `index.html`.

## 6. Useful quick commands (run inside `portfolio_web/`)

* Create a backup of existing files:

```bash
mkdir backups
cp index.html backups/index.html.bak
cp style.css backups/style.css.bak
cp script.js backups/script.js.bak
```

* Copy images from the cloned repo (example path):

```bash
cp -r ../cloned_repo/assets/images ./images
```

* Check which image files are referenced in `index.html` (simple grep):

```bash
grep -oE "images/[^"]+" index.html | sort -u
```

## 7. Git workflow recommendation for your class (two-person team)

Follow the project manager style your teacher requested: multiple branches, clear PRs, and small commits.

Suggested branch layout:

* `master` (or `main`) — stable classroom submission branch (protected)
* `analysis` — your analysis & documentation (you mentioned you already have this)
* `frontend` — parent branch for front-end work

  * `frontend/html` — HTML work (your teammate or you)
  * `frontend/css` — CSS work
  * `frontend/js` — JS work (if needed)

Example commit & PR steps:

1. On your machine, create a feature branch: `git checkout -b frontend/html`.
2. Add/copy the updated `index.html` and `images/`:

   ```bash
   git add index.html images/
   git commit -m "chore(frontend): update index paths and add images folder"
   git push origin frontend/html
   ```
3. Create a Pull Request into `frontend` with a clear title describing the change (e.g. "Fix asset paths and add images for portfolio_web").
4. Reviewer (project manager or teammate) reviews and merges into `frontend`.
5. When `frontend` is stable, create PR from `frontend` into `master` and merge.

PR checklist:

* [ ] Files updated only contain intended changes
* [ ] Images exist and load locally
* [ ] JavaScript features tested (navigation, modal, form enable)
* [ ] Commit message follows team convention

## 8. Example commit messages

* `fix(paths): point css/js/image imports to local images/ and root files`
* `chore(images): add images folder copied from original repo`
* `docs(analysis): add project analysis and testing instructions`

## 9. Known issues & troubleshooting

* If images 404: check that `images/<filename>` exactly matches filenames (case-sensitive on most servers).
* If JS selectors return `null` and throw errors: ensure HTML is loaded before JS — the script tag is at the end of `index.html`, which is correct. If you move it to `<head>`, add `defer` to the script tag.
* If fonts or remote resources are blocked, check network and CORS issues. Nothing else in this code requires server-side components.

## 10. Next steps / enhancements (optional)

* Normalize JS filename across branches (e.g. use `main.js` consistently) to avoid confusion.
* Add a small `README.md` describing the repo and how to run locally.
* Add a `.gitignore` if you create local build files or node modules later.

---

If you want, I can also:

* produce a `README.md` with quick-run instructions,
* give the exact `sed` commands to convert paths in bulk across multiple files,
* verify the `images/` folder contents against references (paste `ls` output).

Prepared by: *ChatGPT — assistant for your GitHub class project*
